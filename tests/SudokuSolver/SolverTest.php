<?php

namespace Tests\SudokuSolver;

use PHPUnit\Framework\TestCase;
use SudokuSolver\Solver;

class SolverTest extends TestCase
{
    public function getGrids()
    {
        return [
            [
                [
                    ['5', '3', '4', '6', '7', '8', '9', '1', '2'],
                    ['6', '7', '2', '1', '9', '5', '3', '4', '8'],
                    ['1', '9', '8', '3', '4', '2', '5', '6', '7'],
                    ['8', '5', '9', '7', '6', '1', '4', '2', '3'],
                    ['4', '2', '6', '8', '5', '3', '7', '9', '1'],
                    ['7', '1', '3', '9', '2', '4', '8', '5', '6'],
                    ['9', '6', '1', '5', '3', '7', '2', '8', '4'],
                    ['2', '8', '7', '4', '1', '9', '6', '3', '5'],
                    ['3', '4', '5', '2', '8', '6', '1', '7', '9'],
                ],
                [
                    ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                    ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                    ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                    ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
                    ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
                    ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
                    ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                    ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
                    ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                ],
            ],
            [
                [
                    ['5', '1', '9', '7', '4', '8', '6', '3', '2'],
                    ['7', '8', '3', '6', '5', '2', '4', '1', '9'],
                    ['4', '2', '6', '1', '3', '9', '8', '7', '5'],
                    ['3', '5', '7', '9', '8', '6', '2', '4', '1'],
                    ['2', '6', '4', '3', '1', '7', '5', '9', '8'],
                    ['1', '9', '8', '5', '2', '4', '3', '6', '7'],
                    ['9', '7', '5', '8', '6', '3', '1', '2', '4'],
                    ['8', '3', '2', '4', '9', '1', '7', '5', '6'],
                    ['6', '4', '1', '2', '7', '5', '9', '8', '3'],
                ],
                [
                    ['.', '.', '9', '7', '4', '8', '.', '.', '.'],
                    ['7', '.', '.', '.', '.', '.', '.', '.', '.'],
                    ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
                    ['.', '.', '7', '.', '.', '.', '2', '4', '.'],
                    ['.', '6', '4', '.', '1', '.', '5', '9', '.'],
                    ['.', '9', '8', '.', '.', '.', '3', '.', '.'],
                    ['.', '.', '.', '8', '.', '3', '.', '2', '.'],
                    ['.', '.', '.', '.', '.', '.', '.', '.', '6'],
                    ['.', '.', '.', '2', '7', '5', '9', '.', '.'],
                ],
            ],
        ];
    }

    /**
     * @dataProvider getGrids
     */
    public function testSolver($expected, $board)
    {
        (new Solver)($board);

        $this->assertSame(
            $this->formatGridLines($expected),
            $this->formatGridLines($board),
            "The grid has unexpected numbers:\n" . $this->formatGrid($this->colorizeGrid($expected, $board))
        );
    }

    public function testColumnFailure()
    {
        $this->expectExceptionMessage('Duplicate 2 in the 4th column.');

        $board = [
            ['.', '.', '9', '2', '4', '8', '.', '.', '.'],
            ['7', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
            ['.', '.', '7', '.', '.', '.', '2', '4', '.'],
            ['.', '6', '4', '.', '1', '.', '5', '9', '.'],
            ['.', '9', '8', '.', '.', '.', '3', '.', '.'],
            ['.', '.', '.', '8', '.', '3', '.', '2', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '6'],
            ['.', '.', '.', '2', '7', '5', '9', '.', '.'],
        ];

        (new Solver)($board);

        echo $this->formatGrid($board);
    }

    public function testLineFailure()
    {
        $this->expectExceptionMessage('Duplicate 9 in the 1st line.');

        $board = [
            ['.', '.', '9', '9', '4', '8', '.', '.', '.'],
            ['7', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
            ['.', '.', '7', '.', '.', '.', '2', '4', '.'],
            ['.', '6', '4', '.', '1', '.', '5', '9', '.'],
            ['.', '9', '8', '.', '.', '.', '3', '.', '.'],
            ['.', '.', '.', '8', '.', '3', '.', '2', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '6'],
            ['.', '.', '.', '2', '7', '5', '9', '.', '.'],
        ];

        (new Solver)($board);

        echo $this->formatGrid($board);
    }

    public function testSquareFailure()
    {
        $this->expectExceptionMessage('Duplicate 2 in the 8th square.');

        $board = [
            ['.', '.', '9', '7', '4', '8', '.', '.', '.'],
            ['7', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
            ['.', '.', '7', '.', '.', '.', '2', '4', '.'],
            ['.', '6', '4', '.', '1', '.', '5', '9', '.'],
            ['.', '9', '8', '.', '.', '.', '3', '.', '.'],
            ['.', '.', '.', '8', '.', '2', '.', '3', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '6'],
            ['.', '.', '.', '2', '7', '5', '9', '.', '.'],
        ];

        (new Solver)($board);

        echo $this->formatGrid($board);
    }

    public function testResolutionFailure()
    {
        $this->expectExceptionMessage('Unable to solve the sudoku grid.');

        $board = [
            ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
            ['.', '.', '7', '.', '.', '.', '2', '4', '.'],
            ['.', '6', '4', '.', '1', '.', '5', '9', '.'],
            ['.', '9', '8', '.', '.', '.', '3', '.', '.'],
            ['.', '.', '.', '8', '.', '3', '.', '2', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '6'],
            ['.', '.', '.', '2', '7', '5', '.', '.', '.'],
        ];

        (new Solver)($board);

        echo $this->formatGrid($board);
    }

    protected function colorizeGrid($expected, $sudoku)
    {
        foreach ($sudoku as $y => &$line) {
            foreach ($line as $x => &$num) {
                if ($num != $expected[$y][$x]) {
                    $num = "\e[0;31;40m$num\e[0m";
                }
            }
        }

        return $sudoku;
    }

    protected function formatGridLines($sudoku)
    {
        return array_map(function ($line) {
            return implode(' ', $line);
        }, $sudoku);
    }

    protected function formatGrid($sudoku)
    {
        return implode("\n", $this->formatGridLines($sudoku));
    }
}
